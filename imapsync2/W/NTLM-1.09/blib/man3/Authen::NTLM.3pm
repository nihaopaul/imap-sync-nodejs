.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NTLM 3pm"
.TH NTLM 3pm "2011-09-09" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Authen::NTLM \- An NTLM authentication module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    use Mail::IMAPClient;
\&    use Authen::NTLM;
\&    my $imap = Mail::IMAPClient\->new(Server=>\*(Aqimaphost\*(Aq);
\&    ntlm_user($username);
\&    ntlm_password($password);
\&    $imap\->authenticate("NTLM", Authen::NTLM::ntlm);
\&    :
\&    $imap\->logout;
\&    ntlm_reset;
\&    :
.Ve
.PP
or
.PP
.Vb 5
\&    ntlmv2(1);
\&    ntlm_user($username);
\&    ntlm_host($host);
\&    ntlm_password($password);
\&    :
.Ve
.PP
or
.PP
.Vb 10
\&    my $ntlm = Authen::NTLM\-> new(
\&        host     => $host,
\&        user     => $username,
\&        domain   => $domain,
\&        password => $password,
\&        version  => 1,
\&    );
\&    $ntlm\-> challenge;
\&    :
\&    $ntlm\-> challenge($challenge);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&    This module provides methods to use NTLM authentication.  It can
\&    be used as an authenticate method with the Mail::IMAPClient module
\&    to perform the challenge/response mechanism for NTLM connections
\&    or it can be used on its own for NTLM authentication with other
\&    protocols (eg. HTTP).
\&
\&    The implementation is a direct port of the code from F<fetchmail>
\&    which, itself, has based its NTLM implementation on F<samba>.  As
\&    such, this code is not especially efficient, however it will still
\&    take a fraction of a second to negotiate a login on a PII which is
\&    likely to be good enough for most situations.
.Ve
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "\fIntlm_domain()\fR" 4
.IX Item "ntlm_domain()"
.Vb 3
\&    Set the domain to use in the NTLM authentication messages.
\&    Returns the new domain.  Without an argument, this function
\&    returns the current domain entry.
.Ve
.IP "\fIntlm_user()\fR" 4
.IX Item "ntlm_user()"
.Vb 3
\&    Set the username to use in the NTLM authentication messages.
\&    Returns the new username.  Without an argument, this function
\&    returns the current username entry.
.Ve
.IP "\fIntlm_password()\fR" 4
.IX Item "ntlm_password()"
.Vb 3
\&    Set the password to use in the NTLM authentication messages.
\&    Returns the new password.  Without an argument, this function
\&    returns the current password entry.
.Ve
.IP "\fIntlm_reset()\fR" 4
.IX Item "ntlm_reset()"
.Vb 2
\&    Resets the NTLM challenge/response state machine so that the next
\&    call to C<ntlm()> will produce an initial connect message.
.Ve
.IP "\fIntlm()\fR" 4
.IX Item "ntlm()"
.Vb 5
\&    Generate a reply to a challenge.  The NTLM protocol involves an
\&    initial empty challenge from the server requiring a message
\&    response containing the username and domain (which may be empty).
\&    The first call to C<ntlm()> generates this first message ignoring
\&    any arguments.
\&
\&    The second time it is called, it is assumed that the argument is
\&    the challenge string sent from the server.  This will contain 8
\&    bytes of data which are used in the DES functions to generate the
\&    response authentication strings.  The result of the call is the
\&    final authentication string.
\&
\&    If C<ntlm_reset()> is called, then the next call to C<ntlm()> will
\&    start the process again allowing multiple authentications within
\&    an application.
.Ve
.IP "\fIntlmv2()\fR" 4
.IX Item "ntlmv2()"
.Vb 1
\&    Use NTLM v2 authentication.
.Ve
.SS "\s-1OBJECT\s0 \s-1API\s0"
.IX Subsection "OBJECT API"
.ie n .IP "new %options" 4
.el .IP "new \f(CW%options\fR" 4
.IX Item "new %options"
Creates an object that accepts the following options: \f(CW\*(C`user\*(C'\fR, \f(CW\*(C`host\*(C'\fR,
\&\f(CW\*(C`domain\*(C'\fR, \f(CW\*(C`password\*(C'\fR, \f(CW\*(C`version\*(C'\fR.
.IP "challenge [$challenge]" 4
.IX Item "challenge [$challenge]"
If \f(CW$challenge\fR is not supplied, first-stage challenge string is generated.
Otherwise, the third-stage challenge is generated, where \f(CW$challenge\fR is
assumed to be extracted from the second stage of \s-1NTLM\s0 exchange. The result of
the call is the final authentication string.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 6
\&    David (Buzz) Bussenschutt <davidbuzz@gmail.com> \- current maintainer
\&    Dmitry Karasik <dmitry@karasik.eu.org> \- nice ntlmv2 patch, OO extensions.
\&    Andrew Hobson <ahobson@infloop.com> \- initial ntlmv2 code
\&    Mark Bush <Mark.Bush@bushnet.demon.co.uk> \- perl port
\&    Eric S. Raymond \- author of fetchmail
\&    Andrew Tridgell and Jeremy Allison for SMB/Netbios code
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Mail::IMAPClient, LWP::Authen::Ntlm
.SH "HISTORY"
.IX Header "HISTORY"
.Vb 8
\&    1.09 \- fix CPAN ticket # 70703
\&    1.08 \- fix CPAN ticket # 39925
\&    1.07 \- not publicly released
\&    1.06 \- relicense as GPL+ or Artistic
\&    1.05 \- add OO interface by Dmitry Karasik
\&    1.04 \- implementation of NTLMv2 by Andrew Hobson/Dmitry Karasik 
\&    1.03 \- fixes long\-standing 1 line bug L<http://rt.cpan.org/Public/Bug/Display.html?id=9521> \- released by David Bussenschutt 9th Aug 2007 
\&    1.02 \- released by Mark Bush 29th Oct 2001
.Ve
